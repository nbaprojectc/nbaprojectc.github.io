{"version":3,"sources":["components/TeamName.js","components/Search.js","components/PlayerInfo.js","components/AddPlayers.js","components/RemovePlayer.js","components/TeamTable.js","components/Meta.js","models/util.js","models/Player.js","models/Team.js","components/TeamEditor.js","components/Home.js","App.js","index.js"],"names":["TeamName","state","visible","newTeamName","handleOk","_this","props","updateName","setState","handleCancel","handleInput","e","RegExp","test","target","value","this","_this2","react_default","a","createElement","react","typography","Title","style","textAlign","teamName","tooltip","placement","title","icon","className","marginLeft","fontSize","type","onClick","showModal","modal","onOk","onCancel","destroyOnClose","input","autoFocus","size","placeholder","onChange","onKeyPress","charCode","Component","Search","width","marginBottom","search","handleSearch","PlayerInfo","renderStats","data","i","key","player","push","margin","popconfirm","href","textDecoration","okText","cancelButtonProps","display","AddPlayers","rowSelection","selectedRowKeys","selectedRows","onSelect","getCheckboxProps","disabled","length","_","components_Search","table","bordered","columns","dataIndex","sorter","b","nameA","Player","toLowerCase","nameB","sortDirections","TmA","Tm","TmB","PosA","Pos","PosB","Age","PTS","fixed","render","components_PlayerInfo","dataSource","loading","pagination","pageSize","showTotal","total","range","concat","current","page","pageChange","rowKey","RemovePlayer","cancelText","onConfirm","handleRemove","TeamTable","components_RemovePlayer","Meta","statistic","float","paddingBottom","valueStyle","marginTop","suffix","API_URL","attributes","k","Object","classCallCheck","serialize","playerId","firstName","split","lastName","stats","W_PCT","MIN","FGA","FGA3","FTA","OREB","DREB","AST","TOV","STL","BLK","PF","fetch","json","players","map","playerData","RichardToEmilio","teamId","id","richard","emilio","Team","rows","keys","serverRows","serverTeamName","undefined","name","getAllForTeam","method","body","JSON","stringify","headers","Accept","Content-Type","response","status","Error","newPlayersDelta","p","objectSpread","oldPlayer","teams","teamData","team","get","loadPlayers","TeamEditor","possibleConstructorReturn","getPrototypeOf","call","loadTeam","getWithPlayers","_id","then","getData","getAll","fuse","Fuse","predict","res","console","log","save","saving","history","catch","err","message","error","list","onTabChange","match","params","TabPane","Tabs","page_header","onBack","subTitle","components_TeamName","tabs","defaultActiveKey","tab","components_Meta","components_AddPlayers","components_TeamTable","es_button","Home","found","_callee","newTeam","regenerator_default","wrap","_context","prev","next","stop","find","height","justifyContent","flexDirection","alignItems","marginRight","App","react_router_dom","react_router","path","exact","component","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e7aa422d.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { Icon, Typography, Modal, Tooltip, Input } from 'antd';\r\n\r\nclass TeamName extends Component {\r\n    state = {\r\n        visible: false,\r\n        newTeamName: null\r\n    };\r\n\r\n    handleOk = () => {\r\n        this.props.updateName(this.state.newTeamName);\r\n        this.setState({\r\n            visible: false,\r\n            newTeamName: null\r\n        });\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            visible: false\r\n        });\r\n    };\r\n\r\n    handleInput = e => {\r\n        let reg = new RegExp(/^[\\w\\d\\ ]+$/g);\r\n        if (reg.test(e.target.value)) {\r\n            this.setState({ newTeamName: e.target.value });\r\n        }\r\n    };\r\n\r\n    showModal() {\r\n        this.setState({ visible: true });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Typography.Title style={{ textAlign: 'center' }}>\r\n                    {this.props.teamName}\r\n                    <Tooltip placement=\"top\" title=\"Edit team name\">\r\n                        <Icon\r\n                            className=\"editIcon\"\r\n                            style={{ marginLeft: '5px', fontSize: '14px' }}\r\n                            type=\"edit\"\r\n                            onClick={() => this.showModal()}\r\n                        />\r\n                    </Tooltip>\r\n                </Typography.Title>\r\n                <Modal\r\n                    title=\"Edit team name\"\r\n                    visible={this.state.visible}\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleCancel}\r\n                    destroyOnClose={true}\r\n                >\r\n                    <Input\r\n                        autoFocus\r\n                        size=\"large\"\r\n                        placeholder={this.props.teamName}\r\n                        onChange={this.handleInput}\r\n                        onKeyPress={e => {\r\n                            if (e.charCode === 13) this.handleOk();\r\n                        }}\r\n                        value={this.state.newTeamName}\r\n                    />\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeamName;\r\n","import React, { Component } from 'react';\r\nimport { Input } from 'antd';\r\n\r\nclass Search extends Component {\r\n    render() {\r\n        return (\r\n            <Input.Search\r\n                style={{ width: '200px', marginBottom: '10px' }}\r\n                value={this.props.search}\r\n                onChange={this.props.handleSearch}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Modal, Popconfirm } from 'antd';\r\n\r\nclass PlayerInfo extends Component {\r\n    state = { visible: false };\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n            visible: true\r\n        });\r\n    };\r\n\r\n    handleOk = e => {\r\n        this.setState({\r\n            visible: false\r\n        });\r\n    };\r\n\r\n    renderStats = () => {\r\n        let data = [];\r\n        let i = 0;\r\n        for (let key in this.props.player) {\r\n            data.push(\r\n                <p key={i++} style={{ margin: '0px' }}>\r\n                    <b>{key}: </b>\r\n                    {this.props.player[key]}\r\n                </p>\r\n            );\r\n        }\r\n        return data;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Popconfirm title=\"\" visible={false}>\r\n                    <a\r\n                        onClick={this.showModal}\r\n                        href=\"/\"\r\n                        style={{ textDecoration: 'none' }}\r\n                    >\r\n                        Expand\r\n                    </a>\r\n                </Popconfirm>\r\n                <Modal\r\n                    title=\"Player statistics\"\r\n                    okText=\"Close\"\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleOk}\r\n                    visible={this.state.visible}\r\n                    cancelButtonProps={{ style: { display: 'none' } }}\r\n                    destroyOnClose={true}\r\n                >\r\n                    {this.renderStats()}\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerInfo;\r\n","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport { Table } from 'antd';\r\nimport * as _ from 'lodash';\r\nimport PlayerInfo from './PlayerInfo';\r\n\r\nclass AddPlayers extends Component {\r\n    render() {\r\n        const rowSelection = {\r\n            selectedRowKeys: this.props.selectedRowKeys,\r\n            onChange: (selectedRowKeys, selectedRows) => {\r\n                this.props.onSelect(selectedRowKeys, selectedRows);\r\n            },\r\n            getCheckboxProps: player => ({\r\n                disabled:\r\n                    this.props.selectedRowKeys.length >= 15 &&\r\n                    _.indexOf(this.props.selectedRows, player) === -1\r\n            })\r\n        };\r\n        return (\r\n            <div style={{ textAlign: 'right' }}>\r\n                <Search\r\n                    handleSearch={this.props.handleSearch}\r\n                    search={this.props.search}\r\n                />\r\n                <Table\r\n                    bordered\r\n                    rowSelection={rowSelection}\r\n                    columns={[\r\n                        {\r\n                            title: 'Name',\r\n                            dataIndex: 'Player',\r\n                            sorter: (a, b) => {\r\n                                let nameA = a.Player.toLowerCase(),\r\n                                    nameB = b.Player.toLowerCase();\r\n                                if (nameA < nameB) return -1;\r\n                                if (nameA > nameB) return 1;\r\n                                return 0;\r\n                            },\r\n                            sortDirections: ['ascend', 'descend']\r\n                        },\r\n                        {\r\n                            title: 'Team',\r\n                            dataIndex: 'Tm',\r\n                            sorter: (a, b) => {\r\n                                let TmA = a.Tm.toLowerCase(),\r\n                                    TmB = b.Tm.toLowerCase();\r\n                                if (TmA < TmB) return -1;\r\n                                if (TmA > TmB) return 1;\r\n                                return 0;\r\n                            },\r\n                            sortDirections: ['ascend', 'descend']\r\n                        },\r\n                        {\r\n                            title: 'Position',\r\n                            dataIndex: 'Pos',\r\n                            sorter: (a, b) => {\r\n                                let PosA = a.Pos.toLowerCase(),\r\n                                    PosB = b.Pos.toLowerCase();\r\n                                if (PosA < PosB) return -1;\r\n                                if (PosA > PosB) return 1;\r\n                                return 0;\r\n                            },\r\n                            sortDirections: ['ascend', 'descend']\r\n                        },\r\n                        {\r\n                            title: 'Age',\r\n                            dataIndex: 'Age',\r\n                            sorter: (a, b) => a.Age - b.Age,\r\n                            sortDirections: ['ascend', 'descend']\r\n                        },\r\n                        {\r\n                            title: 'Points',\r\n                            dataIndex: 'PTS',\r\n                            sorter: (a, b) => a.PTS - b.PTS,\r\n                            sortDirections: ['ascend', 'descend']\r\n                        },\r\n                        {\r\n                            title: '',\r\n                            key: 'operation',\r\n                            fixed: 'right',\r\n                            width: 100,\r\n                            render: player => <PlayerInfo player={player} />\r\n                        }\r\n                    ]}\r\n                    dataSource={this.props.data}\r\n                    loading={this.props.loading}\r\n                    pagination={{\r\n                        pageSize: 15,\r\n                        showTotal: (total, range) =>\r\n                            `${range[0]}-${range[1]} of ${total} items`,\r\n                        current: this.props.page,\r\n                        onChange: this.props.pageChange\r\n                    }}\r\n                    rowKey={'key'}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPlayers;\r\n","import React, { Component } from 'react';\r\nimport { Popconfirm } from 'antd';\r\n\r\nclass RemovePlayer extends Component {\r\n    render() {\r\n        return (\r\n            <Popconfirm\r\n                title=\"Remove player from team?\"\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n                onConfirm={() => this.props.handleRemove(this.props.player)}\r\n            >\r\n                <a href=\"/\">Remove</a>\r\n            </Popconfirm>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RemovePlayer;\r\n","import React, { Component } from 'react';\r\nimport { Table } from 'antd';\r\nimport RemovePlayer from './RemovePlayer';\r\nimport PlayerInfo from './PlayerInfo';\r\n\r\nclass TeamTable extends Component {\r\n    render() {\r\n        return (\r\n            <Table\r\n                columns={[\r\n                    {\r\n                        title: 'Name',\r\n                        dataIndex: 'Player',\r\n                        sorter: (a, b) => {\r\n                            let nameA = a.Player.toLowerCase(),\r\n                                nameB = b.Player.toLowerCase();\r\n                            if (nameA < nameB) return -1;\r\n                            if (nameA > nameB) return 1;\r\n                            return 0;\r\n                        },\r\n                        sortDirections: ['ascend', 'descend']\r\n                    },\r\n                    {\r\n                        title: 'Team',\r\n                        dataIndex: 'Tm',\r\n                        sorter: (a, b) => {\r\n                            let TmA = a.Tm.toLowerCase(),\r\n                                TmB = b.Tm.toLowerCase();\r\n                            if (TmA < TmB) return -1;\r\n                            if (TmA > TmB) return 1;\r\n                            return 0;\r\n                        },\r\n                        sortDirections: ['ascend', 'descend']\r\n                    },\r\n                    {\r\n                        title: 'Position',\r\n                        dataIndex: 'Pos',\r\n                        sorter: (a, b) => {\r\n                            let PosA = a.Pos.toLowerCase(),\r\n                                PosB = b.Pos.toLowerCase();\r\n                            if (PosA < PosB) return -1;\r\n                            if (PosA > PosB) return 1;\r\n                            return 0;\r\n                        },\r\n                        sortDirections: ['ascend', 'descend']\r\n                    },\r\n                    {\r\n                        title: 'Age',\r\n                        dataIndex: 'Age',\r\n                        sorter: (a, b) => a.Age - b.Age,\r\n                        sortDirections: ['ascend', 'descend']\r\n                    },\r\n                    {\r\n                        title: 'Points',\r\n                        dataIndex: 'PTS',\r\n                        sorter: (a, b) => a.PTS - b.PTS,\r\n                        sortDirections: ['ascend', 'descend']\r\n                    },\r\n                    {\r\n                        title: '',\r\n                        key: 'expand',\r\n                        fixed: 'right',\r\n                        width: 100,\r\n                        render: player => <PlayerInfo player={player} />\r\n                    },\r\n                    {\r\n                        title: '',\r\n                        key: 'operation',\r\n                        fixed: 'right',\r\n                        width: 100,\r\n                        render: player => (\r\n                            <RemovePlayer\r\n                                player={player}\r\n                                handleRemove={this.props.handleRemove}\r\n                            />\r\n                        )\r\n                    }\r\n                ]}\r\n                pagination={{\r\n                    pageSize: 15,\r\n                    showTotal: (total, range) =>\r\n                        `${range[0]}-${range[1]} of ${total} items`\r\n                }}\r\n                dataSource={this.props.selectedRows}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeamTable;\r\n","import React, { Component } from 'react';\r\nimport { Statistic } from 'antd';\r\n\r\nclass Meta extends Component {\r\n    render() {\r\n        return (\r\n            <Statistic\r\n                style={{ float: 'left', paddingBottom: '5px' }}\r\n                valueStyle={{\r\n                    marginTop: -10,\r\n                    textAlign: 'left'\r\n                }}\r\n                title=\"Players selected\"\r\n                value={this.props.length}\r\n                suffix=\"/ 15\"\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Meta;\r\n","const API_URL = \"https://nbaprojectcbackendproduction.azurewebsites.net/api\";\r\n\r\nexport default API_URL;","import API_URL from './util';\r\n\r\nexport default class Player {\r\n    constructor(attributes) {\r\n        for(let k in attributes) this[k] = attributes[k];\r\n    }\r\n\r\n    static async getAll() {\r\n        let players = (await (await fetch(`${API_URL}/Players`)).json()).players;\r\n        return players.map(playerData => new Player(Player.RichardToEmilio(playerData)));\r\n    }\r\n    \r\n    static async getAllForTeam(teamId) {\r\n        try {\r\n            let players = (await (await fetch(`${API_URL}/TeamPlayers/${teamId}`)).json()).players;\r\n            return players.map(playerData => new Player(Player.RichardToEmilio(playerData)));\r\n        } catch {\r\n            return []; // Error whilst retrieving data so return empty array\r\n        }\r\n    }\r\n\r\n    static async get(id) {\r\n        let player = (await (await fetch(`${API_URL}/Players/${id}`)).json()).players[0];\r\n        return new Player(Player.RichardToEmilio(player));\r\n    }\r\n\r\n    static RichardToEmilio(richard) {\r\n        let emilio = {\r\n            Player: `${richard.firstName} ${richard.lastName}`,\r\n            key: richard.playerId\r\n        };\r\n        for(let k in richard.stats) emilio[k] = richard.stats[k];\r\n    \r\n        return emilio;\r\n    }\r\n\r\n    serialize = () => ({\r\n        playerId: this.key,\r\n        firstName: this.Player.split(' ')[0],\r\n        lastName:  this.Player.split(' ')[1],\r\n        stats: {\r\n            W_PCT: this.W_PCT, \r\n            MIN: this.MIN, \r\n            FGA: this.FGA, \r\n            FGA3: this.FGA3, \r\n            FTA: this.FTA, \r\n            OREB: this.OREB, \r\n            DREB: this.DREB, \r\n            AST: this.AST, \r\n            TOV: this.TOV, \r\n            STL: this.STL, \r\n            BLK: this.BLK, \r\n            PF: this.PF, \r\n            PTS: this.PTS \r\n        }\r\n    });\r\n}","import * as _ from 'lodash';\r\nimport API_URL from './util';\r\nimport Player from './Player';\r\n\r\nexport default class Team {\r\n    rows = [];\r\n    keys = [];\r\n\r\n    serverRows = [];\r\n    serverTeamName = undefined;\r\n\r\n    constructor(attributes) {\r\n        if (typeof attributes !== 'object') return; // No input object, don't set attributes\r\n        for (let k in attributes) this[k] = attributes[k];\r\n\r\n        if (typeof attributes.name === 'string')\r\n            this.serverTeamName = attributes.name;\r\n    }\r\n\r\n    static async getAll() {\r\n        let teams = (await (await fetch(`${API_URL}/Teams`)).json()).teams;\r\n        return teams.map(teamData => new Team(teamData));\r\n    }\r\n\r\n    static async get(id) {\r\n        let team = (await (await fetch(`${API_URL}/Teams/${id}`)).json())\r\n            .teams[0];\r\n        return new Team(team);\r\n    }\r\n\r\n    static async getWithPlayers(id) {\r\n        let team = await Team.get(id);\r\n        await team.loadPlayers();\r\n        return team;\r\n    }\r\n\r\n    async loadPlayers() {\r\n        this.rows = await Player.getAllForTeam(this.id);\r\n        this.serverRows = _.clone(this.rows);\r\n        this.keys = this.rows.map(player => player.key);\r\n    }\r\n\r\n    async delete() {\r\n        await fetch(`${API_URL}/Teams/${this.id}`, { method: 'DELETE' });\r\n    }\r\n\r\n    async save() {\r\n        if (typeof this.id !== 'number') {\r\n            // Create a new team\r\n            let response = await fetch(`${API_URL}/Teams`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    teamName: this.name\r\n                }),\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            if (response.status !== 201)\r\n                throw new Error('Failed to create new team');\r\n            let data = await response.json();\r\n            for (let k in data) this[k] = data[k];\r\n        } else if (this.name !== this.serverTeamName) {\r\n            // Update the team record\r\n            let response = await fetch(`${API_URL}/Teams/${this.id}`, {\r\n                method: 'PATCH',\r\n                body: JSON.stringify({\r\n                    teamName: this.name\r\n                }),\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            if (response.status !== 200)\r\n                throw new Error('Failed to update team');\r\n        }\r\n        this.serverTeamName = this.name;\r\n\r\n        // Attempt to post the new TeamPlayers if any have been added\r\n        let newPlayersDelta = _.differenceBy(\r\n            this.rows,\r\n            this.serverRows,\r\n            p => p.key\r\n        ).map(player => ({\r\n            ...player.serialize(),\r\n            teamId: this.id\r\n        }));\r\n        if (newPlayersDelta.length > 0) {\r\n            let response = await fetch(`${API_URL}/TeamPlayers/${this.id}`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    players: newPlayersDelta\r\n                }),\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            if (response.status !== 201)\r\n                throw new Error('Failed to update team players.');\r\n        }\r\n\r\n        // Attempt to delete the old team players\r\n        for (let oldPlayer of _.differenceBy(\r\n            this.serverRows,\r\n            this.rows,\r\n            p => p.key\r\n        )) {\r\n            let response = await fetch(\r\n                `${API_URL}/TeamPlayers/${this.id}/${oldPlayer.key}`,\r\n                {\r\n                    method: 'DELETE'\r\n                }\r\n            );\r\n            if (response.status !== 200)\r\n                throw new Error('Failed to update team players.');\r\n        }\r\n\r\n        this.serverRows = _.clone(this.rows);\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Tabs, PageHeader, Button, message } from 'antd';\r\nimport TeamName from './TeamName';\r\nimport AddPlayers from './AddPlayers';\r\nimport TeamTable from './TeamTable';\r\nimport Fuse from 'fuse.js';\r\nimport * as _ from 'lodash';\r\nimport Meta from './Meta';\r\n\r\nimport Team from '../models/Team';\r\nimport Player from '../models/Player';\r\n\r\nclass TeamEditor extends Component {\r\n    team = null;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            _id: this.props.match.params.id || '',\r\n            name: this.props.match.params.name || '',\r\n            selectedRowKeys: [],\r\n            selectedRows: [],\r\n            data: [],\r\n            fuse: null,\r\n            loading: true,\r\n            search: '',\r\n            page: 1,\r\n            saving: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n        this.loadTeam();\r\n    }\r\n\r\n    componentDidUpdate(props, state) {\r\n        if (\r\n            this.state.name !== state.name ||\r\n            this.state.selectedRowKeys !== state.selectedRowKeys ||\r\n            this.state.selectedRows !== state.selectedRows\r\n        )\r\n            this.save();\r\n    }\r\n\r\n    loadTeam = () => {\r\n        Team.getWithPlayers(this.state._id).then(team => {\r\n            this.team = team;\r\n            this.setState({\r\n                selectedRowKeys: team.keys,\r\n                name: team.name,\r\n                selectedRows: team.rows\r\n            });\r\n        });\r\n    };\r\n\r\n    getData = () => {\r\n        Player.getAll()\r\n            .then(data => this.setState({ data }))\r\n            .then(() => {\r\n                this.setState({\r\n                    fuse: new Fuse(this.state.data, {\r\n                        keys: ['Player']\r\n                    }),\r\n                    loading: false\r\n                });\r\n            });\r\n    };\r\n\r\n    predict = () => {\r\n        fetch('/api/predict', {\r\n            method: 'POST',\r\n            body: JSON.stringify(this.state.selectedRows),\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => console.log(json));\r\n    };\r\n\r\n    save = () => {\r\n        this.setState({ saving: true });\r\n        // Update the team object\r\n        this.team.name = this.state.name;\r\n        this.team.rows = this.state.selectedRows;\r\n        this.team.keys = this.state.selectedRowKeys;\r\n        // Save the changes\r\n        this.team\r\n            .save()\r\n            .then(() => {\r\n                this.props.history.push(`/team/${this.team.id}`);\r\n                this.setState({ saving: false });\r\n            })\r\n            .catch(err => {\r\n                this.setState({ saving: false });\r\n                message.error(`Error: ${err.message}`);\r\n            });\r\n    };\r\n\r\n    handleSearch = e => {\r\n        e.target.value === ''\r\n            ? this.setState({ data: this.state.fuse.list, search: '' })\r\n            : this.setState({\r\n                  data: this.state.fuse.search(e.target.value),\r\n                  page: 1,\r\n                  search: e.target.value\r\n              });\r\n    };\r\n\r\n    onSelect = (selectedRowKeys, selectedRows) => {\r\n        this.setState({ selectedRowKeys, selectedRows });\r\n    };\r\n\r\n    onTabChange = () => {\r\n        this.handleSearch({ target: { value: '' } });\r\n    };\r\n\r\n    handleRemove = player => {\r\n        this.setState({\r\n            selectedRowKeys: _.without(this.state.selectedRowKeys, player.key),\r\n            selectedRows: _.without(this.state.selectedRows, player)\r\n        });\r\n    };\r\n\r\n    updateName = name => {\r\n        this.setState({ name });\r\n    };\r\n\r\n    pageChange = e => {\r\n        this.setState({ page: e });\r\n    };\r\n\r\n    render() {\r\n        let TabPane = Tabs.TabPane;\r\n        return (\r\n            <Fragment>\r\n                <PageHeader\r\n                    style={{ textAlign: 'left' }}\r\n                    onBack={() => {\r\n                        this.props.history.push('/');\r\n                    }}\r\n                    title=\"Team Editor\"\r\n                    subTitle=\"create or modify an existing team\"\r\n                />\r\n                <TeamName\r\n                    updateName={this.updateName}\r\n                    teamName={this.state.name}\r\n                    loading={this.state.loading}\r\n                />\r\n                <Tabs defaultActiveKey=\"1\" onChange={this.onTabChange}>\r\n                    <TabPane tab=\"Add Players\" key=\"1\">\r\n                        <Meta length={this.state.selectedRowKeys.length} />\r\n                        <AddPlayers\r\n                            loading={this.state.loading}\r\n                            data={this.state.data}\r\n                            onSelect={this.onSelect}\r\n                            selectedRowKeys={this.state.selectedRowKeys}\r\n                            selectedRows={this.state.selectedRows}\r\n                            handleSearch={this.handleSearch}\r\n                            search={this.state.search}\r\n                            page={this.state.page}\r\n                            pageChange={this.pageChange}\r\n                        />\r\n                    </TabPane>\r\n                    <TabPane tab=\"View Team\" key=\"2\">\r\n                        <TeamTable\r\n                            selectedRows={this.state.selectedRows}\r\n                            handleRemove={this.handleRemove}\r\n                        />\r\n                        <Button\r\n                            disabled={this.state.selectedRows.length < 3}\r\n                            type=\"primary\"\r\n                            onClick={this.predict}\r\n                            style={{ margin: '10px' }}\r\n                        >\r\n                            Predict\r\n                        </Button>\r\n                    </TabPane>\r\n                </Tabs>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeamEditor;\r\n","import React, { Component } from 'react';\r\nimport { Button, Typography, Input, message } from 'antd';\r\nimport Team from '../models/Team';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        name: '',\r\n        found: false,\r\n        id: null,\r\n        teams: [],\r\n        loading: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        Team.getAll().then(teams => {\r\n            this.setState({ teams, loading: false });\r\n        });\r\n    }\r\n\r\n    handleOk = async () => {\r\n        if (this.state.name === '') message.error('Please enter a team name');\r\n        else {\r\n            if (this.state.id != null) {\r\n                this.props.history.push(`/team/${this.state.id}`);\r\n            } else {\r\n                let newTeam = new Team({ name: this.state.name });\r\n                await newTeam.save();\r\n                this.props.history.push(`/team/${newTeam.id}`);\r\n            }\r\n        }\r\n    };\r\n\r\n    handleInput = e => {\r\n        // a-z 0-9, _ and spaces);\r\n        let reg = new RegExp(/^[\\w\\d\\ ]+$/g);\r\n\r\n        if (reg.test(e.target.value) || e.target.value === '') {\r\n            if (\r\n                !this.state.teams.find(team => {\r\n                    if (\r\n                        team.name.toLowerCase() === e.target.value.toLowerCase()\r\n                    ) {\r\n                        this.setState({ id: team.id });\r\n                        return true;\r\n                    }\r\n                })\r\n            ) {\r\n                this.setState({ id: null });\r\n            }\r\n            this.setState({ name: e.target.value });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    flexDirection: 'column',\r\n                    alignItems: 'center'\r\n                }}\r\n            >\r\n                <Typography.Title>R.P.S.</Typography.Title>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    <Input\r\n                        autoFocus\r\n                        placeholder={this.props.teamName}\r\n                        onChange={this.handleInput}\r\n                        style={{ marginRight: '10px' }}\r\n                        value={this.state.name}\r\n                    />\r\n                    {this.state.id != null ? (\r\n                        <Button onClick={this.handleOk} type=\"primary\">\r\n                            View Team\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            onClick={this.handleOk}\r\n                            disabled={this.state.loading}\r\n                            type=\"primary\"\r\n                        >\r\n                            Create Team\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport TeamEditor from './components/TeamEditor';\r\nimport Home from './components/Home';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Router>\r\n                    <Route path=\"/\" exact component={Home} />\r\n                    <Route path=\"/create/:name\" component={TeamEditor} />\r\n                    <Route path=\"/team/:id\" component={TeamEditor} />\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}